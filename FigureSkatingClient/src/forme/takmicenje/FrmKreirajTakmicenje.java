/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.takmicenje;

import domain.Klizac;
import domain.Takmicenje;
import domain.TipTakmicenja;
import domain.Ucesce;
import forme.FormMode;
import forme.klizac.FormaPretrazivanjeKlizaca;
import forme.model.TabelaModelUcesceRezultati;
import forme.ucesca.FrmUcesce;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import kontroler.Kontroler;
import forme.model.TabelaUcesce;
import konekcija.Komunikacija;
import transfer.TransferObjekatOdgovor;
import transfer.TransferObjekatZahtev;
import transfer.util.Session;
import transfer.util.Util;

/**
 *
 * @author Bojana
 */
public class FrmKreirajTakmicenje extends javax.swing.JFrame {

    /**
     * Creates new form FrmKreirajTakmicenjeFrame
     */
    public FrmKreirajTakmicenje(FormMode formMode) {
        initComponents();
        onemoguciIzmenuTabeleUcesce();
        tblUcesce.setModel(new TabelaModelUcesceRezultati(new ArrayList<>()));
        izlistajTipoveTakmicenja();
        adjustFormMode(formMode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelKreiranjeTakmicenja = new javax.swing.JPanel();
        lblNazivTakmicenja = new javax.swing.JLabel();
        txtNazivTakmicenja = new javax.swing.JTextField();
        lblPocetak = new javax.swing.JLabel();
        lblKraj = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMestoOdrzavanja = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblTipTakmicenja = new javax.swing.JLabel();
        cmbTipTakmicenja = new javax.swing.JComboBox();
        btnSacuvaj = new javax.swing.JButton();
        datumPocetka = new com.toedter.calendar.JDateChooser();
        datumKraja = new com.toedter.calendar.JDateChooser();
        panelUcesce = new javax.swing.JPanel();
        btnKreirajUcesce = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUcesce = new javax.swing.JTable();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        labelaNapomena = new javax.swing.JLabel();
        btnZapamti = new javax.swing.JButton();
        btnObrisiR = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnPovratak = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        panelKreiranjeTakmicenja.setBackground(new java.awt.Color(255, 255, 255));
        panelKreiranjeTakmicenja.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Kreiranje takmičenja", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 51))); // NOI18N

        lblNazivTakmicenja.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblNazivTakmicenja.setForeground(new java.awt.Color(51, 51, 51));
        lblNazivTakmicenja.setText("Naziv takmičenja: ");

        txtNazivTakmicenja.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNazivTakmicenja.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 51, 51)));

        lblPocetak.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPocetak.setForeground(new java.awt.Color(51, 51, 51));
        lblPocetak.setText("Početak takmičenja (dd.MM.yyyy) : ");

        lblKraj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblKraj.setForeground(new java.awt.Color(51, 51, 51));
        lblKraj.setText("Kraj takmičenja (dd.MM.yyyy) : ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 51, 51));
        jLabel2.setText("Mesto održavanja: ");

        txtMestoOdrzavanja.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMestoOdrzavanja.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 51, 51)));

        lblTipTakmicenja.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTipTakmicenja.setForeground(new java.awt.Color(51, 51, 51));
        lblTipTakmicenja.setText("Tip takmičenja: ");

        cmbTipTakmicenja.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSacuvaj.setBackground(new java.awt.Color(102, 102, 102));
        btnSacuvaj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSacuvaj.setForeground(new java.awt.Color(255, 255, 255));
        btnSacuvaj.setText("Sačuvaj takmičenje");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        datumPocetka.setDateFormatString("dd.MM.yyyy");

        datumKraja.setDateFormatString("dd.MM.yyyy");

        javax.swing.GroupLayout panelKreiranjeTakmicenjaLayout = new javax.swing.GroupLayout(panelKreiranjeTakmicenja);
        panelKreiranjeTakmicenja.setLayout(panelKreiranjeTakmicenjaLayout);
        panelKreiranjeTakmicenjaLayout.setHorizontalGroup(
            panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                        .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMestoOdrzavanja, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                        .addComponent(lblTipTakmicenja)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbTipTakmicenja, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                        .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNazivTakmicenja)
                            .addComponent(lblPocetak)
                            .addComponent(lblKraj))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNazivTakmicenja, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(datumKraja, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addComponent(datumPocetka, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(27, 27, 27))
        );
        panelKreiranjeTakmicenjaLayout.setVerticalGroup(
            panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelKreiranjeTakmicenjaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipTakmicenja)
                    .addComponent(cmbTipTakmicenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNazivTakmicenja)
                    .addComponent(txtNazivTakmicenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPocetak)
                    .addComponent(datumPocetka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblKraj)
                    .addComponent(datumKraja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelKreiranjeTakmicenjaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMestoOdrzavanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(btnSacuvaj)
                .addGap(73, 73, 73))
        );

        panelUcesce.setBackground(new java.awt.Color(255, 255, 255));
        panelUcesce.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Učešće", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 51))); // NOI18N

        btnKreirajUcesce.setBackground(new java.awt.Color(102, 102, 102));
        btnKreirajUcesce.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnKreirajUcesce.setForeground(new java.awt.Color(255, 255, 255));
        btnKreirajUcesce.setText("Sačuvaj učešće");
        btnKreirajUcesce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajUcesceActionPerformed(evt);
            }
        });

        tblUcesce.setBorder(new javax.swing.border.MatteBorder(null));
        tblUcesce.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblUcesce.setForeground(new java.awt.Color(51, 51, 51));
        tblUcesce.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblUcesce);

        btnDodaj.setBackground(new java.awt.Color(102, 102, 102));
        btnDodaj.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDodaj.setForeground(new java.awt.Color(255, 255, 255));
        btnDodaj.setText("+");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnObrisi.setBackground(new java.awt.Color(102, 102, 102));
        btnObrisi.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnObrisi.setForeground(new java.awt.Color(255, 255, 255));
        btnObrisi.setText("-");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        labelaNapomena.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelaNapomena.setForeground(new java.awt.Color(0, 0, 153));
        labelaNapomena.setText("Napomena: Ocene za tehnički deo i prezentaciju moraju biti u opsegu [1.0-6.0] ");

        btnZapamti.setBackground(new java.awt.Color(102, 102, 102));
        btnZapamti.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnZapamti.setForeground(new java.awt.Color(255, 255, 255));
        btnZapamti.setText("Zapamti rezulate");
        btnZapamti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZapamtiActionPerformed(evt);
            }
        });

        btnObrisiR.setBackground(new java.awt.Color(102, 102, 102));
        btnObrisiR.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnObrisiR.setForeground(new java.awt.Color(255, 255, 255));
        btnObrisiR.setText("-");
        btnObrisiR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelUcesceLayout = new javax.swing.GroupLayout(panelUcesce);
        panelUcesce.setLayout(panelUcesceLayout);
        panelUcesceLayout.setHorizontalGroup(
            panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUcesceLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelaNapomena)
                    .addGroup(panelUcesceLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnKreirajUcesce, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelUcesceLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnObrisiR, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnZapamti, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUcesceLayout.setVerticalGroup(
            panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUcesceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelaNapomena)
                .addGap(18, 18, 18)
                .addGroup(panelUcesceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelUcesceLayout.createSequentialGroup()
                        .addComponent(btnDodaj)
                        .addGap(51, 51, 51)
                        .addComponent(btnObrisi)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisiR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnZapamti, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnKreirajUcesce, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forme/img/little_snowflake.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forme/img/snow-flake-icon.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forme/img/little_snowflake.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forme/img/snow-flake-icon.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/forme/img/little_snowflake.png"))); // NOI18N

        btnPovratak.setBackground(new java.awt.Color(102, 102, 102));
        btnPovratak.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPovratak.setForeground(new java.awt.Color(255, 255, 255));
        btnPovratak.setText("Povratak na formu za pretragu");
        btnPovratak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPovratakActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelKreiranjeTakmicenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPovratak, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(66, 66, 66))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(39, 39, 39))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel5)))
                        .addGap(36, 36, 36))
                    .addComponent(panelUcesce, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(21, 21, 21)
                                .addComponent(jLabel5)
                                .addGap(15, 15, 15)
                                .addComponent(jLabel4)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(235, 235, 235)
                                .addComponent(jLabel6)))
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnPovratak)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelKreiranjeTakmicenja, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(panelUcesce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKreirajUcesceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajUcesceActionPerformed

        TabelaUcesce tu = (TabelaUcesce) tblUcesce.getModel();
        ArrayList<Ucesce> ucesca = tu.getUcesca();

        for (Ucesce ucesce : ucesca) {
            if (ucesce.getDisciplina().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Morate odabrati disciplinu!");
                return;
            }
        }

        Takmicenje t = Kontroler.getInstance().getTakmicenje();

        if (ucesca.size() < 1) {
            JOptionPane.showMessageDialog(this,
                    "Sistem ne može da zapamti učešće na takmičenju",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        t.setUcesca(ucesca);
        boolean sacuvano = Kontroler.getInstance().zapamtiUcesceNaTakmicenju(t);

        if (sacuvano) {

            JOptionPane.showMessageDialog(this, "Sistem je zapamtio učešće na takmičenju");

            this.dispose();
            (new FrmPretrazivanjeTakmicenja(this, true)).setVisible(true);

        } else {
            JOptionPane.showMessageDialog(this,
                    "Sistem ne može da zapamti učešće na takmičenju",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnKreirajUcesceActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed

        FormaPretrazivanjeKlizaca frm
                = new FormaPretrazivanjeKlizaca(this, true,
                        FormMode.DODAJ_UCESNIKE);
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);

        TabelaUcesce tu = (TabelaUcesce) tblUcesce.getModel();
        List<Klizac> klizaci = Kontroler.getInstance().dajSveKlizace();
        TableColumnModel tcm = tblUcesce.getColumnModel();
        TableColumn kolona = tcm.getColumn(0);
        JComboBox jc = new JComboBox();
        jc.removeAllItems();
        for (Klizac klizac : klizaci) {
            jc.addItem(klizac);
        }
        kolona.setCellEditor(new DefaultCellEditor(jc));

        ArrayList<String> discipline = new ArrayList<>();
        discipline.add("Obavezni ples");
        discipline.add("Originalni ples");
        discipline.add("Slobodan ples");
        TableColumn kolona2 = tcm.getColumn(1);
        JComboBox jcdiscipline = new JComboBox();
        jcdiscipline.removeAllItems();
        for (String d : discipline) {
            jcdiscipline.addItem(d);
        }
        kolona2.setCellEditor(new DefaultCellEditor(jcdiscipline));

    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int odabraniRed = tblUcesce.getSelectedRow();
        if (odabraniRed == -1) {
            JOptionPane.showMessageDialog(this, "Niste odabrali red!",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        TabelaUcesce tu = (TabelaUcesce) tblUcesce.getModel();
        tu.obrisi(odabraniRed);
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed

        try {
            TipTakmicenja tip = (TipTakmicenja) cmbTipTakmicenja.getSelectedItem();
            String naziv = txtNazivTakmicenja.getText().trim();
            String mesto = txtMestoOdrzavanja.getText().trim();
            Date pocetak = datumPocetka.getDate();
            Date kraj = datumKraja.getDate();

            TransferObjekatZahtev tz = new TransferObjekatZahtev();
            tz.setOperacija(Util.OPERACIJA_VRATI_LISTU_TAKMICENJA);
            Komunikacija.getInstanca().posaljiZahtev(tz);

            TransferObjekatOdgovor too = Komunikacija.getInstanca().primiOdgovor();

            ArrayList<Takmicenje> takmicenja = (ArrayList<Takmicenje>) too.getRezultat();
            for (Takmicenje takmicenje : takmicenja) {
                if (takmicenje.getNaziv().equals(naziv)) {
                    JOptionPane.showMessageDialog(this,
                            "Već postoji takmičenje sa istim nazivom!", "Poruka",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            if (pocetak.after(kraj)) {
                JOptionPane.showMessageDialog(this,
                        "Datum pocetka mora biti pre datuma kraja!", "Poruka",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (naziv.isEmpty() || mesto.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                        "Sva polja moraju biti popunjena!", "Poruka",
                        JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            if (!naziv.isEmpty() && !mesto.isEmpty()) {

                Takmicenje takmicenje
                        = new Takmicenje("T-" + getNextID(), naziv,
                                pocetak, kraj, mesto, tip);

                boolean sacuvano
                        = Kontroler.getInstance().sacuvajTakmicenje(takmicenje);

                if (sacuvano) {

                    this.dispose();

                    Kontroler.getInstance().setTakmicenje(takmicenje);

                    JOptionPane.showMessageDialog(this,
                            "Sistem je kreirao takmičenje! Novo takmičenje ima ID " + takmicenje.getTakmicenjeID(),
                            "Poruka", JOptionPane.WARNING_MESSAGE);
                    FrmPretrazivanjeTakmicenja frm = new FrmPretrazivanjeTakmicenja(null, true);
                    frm.setVisible(true);
                    for (Component cp : panelUcesce.getComponents()) {
                        cp.setEnabled(true);
                    }
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    "Sistem ne može da kreira takmičenje!",
                    "Poruka", JOptionPane.WARNING_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnPovratakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPovratakActionPerformed
        this.dispose();
        FrmPretrazivanjeTakmicenja frm = new FrmPretrazivanjeTakmicenja(null, true);
        frm.setLocationRelativeTo(null);
        frm.setVisible(true);
    }//GEN-LAST:event_btnPovratakActionPerformed

    private void btnZapamtiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZapamtiActionPerformed

        TabelaModelUcesceRezultati tu = (TabelaModelUcesceRezultati) tblUcesce.getModel();
        ArrayList<Ucesce> ucesca = tu.getUcesca();

        for (Ucesce ucesce : ucesca) {
            if (ucesce.getPrezentacija() < 0.0 || ucesce.getPrezentacija() > 6.0) {
                JOptionPane.showMessageDialog(this, "Ocene za prezentaciju moraju biti u opsegu [0.0-6.0]!");
                return;
            }
        }

        for (Ucesce ucesce : ucesca) {
            if (ucesce.getTehnickiDeo() < 0.0 || ucesce.getTehnickiDeo() > 6.0) {
                JOptionPane.showMessageDialog(this, "Ocene za tehnički deo moraju biti u opsegu [0.0-6.0]!");
                return;
            }
        }

        for (Ucesce ucesce : ucesca) {

            if (ucesce.getPlasman() < 0.0) {
                JOptionPane.showMessageDialog(this, "Morate uneti pozitivan broj za plasman!");
                return;
            }
        }

        // koliko je ukupno ostvareno poena
        for (Ucesce u1 : ucesca) {
            Klizac k1 = u1.getKlizac();
            double ukupno = 0d;
            for (Ucesce u2 : ucesca) {
                Klizac k2 = u2.getKlizac();
                if (k1.equals(k2)) {
                    ukupno += (u2.getTehnickiDeo() + u2.getPrezentacija()) / 2.0;
                    u2.setUkupnoOstvarenoPoena(ukupno);
                }
            }
        }

        for (Ucesce ucesce : ucesca) {
            if (ucesce.getDisciplina().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Morate odabrati disciplinu!");
                return;
            }
        }

        // odredi plasman za svakog klizaca
        Collections.sort(ucesca);

        Double scoreComparatorOne;
        Double scoreComparatorTwo;
        int plasman = 0;

        for (int i = 0; i < ucesca.size(); i++) {
            scoreComparatorOne = (ucesca.get(i)).getUkupnoOstvarenoPoena();
            if (i == 0) {
                scoreComparatorTwo = (ucesca.get(i)).getUkupnoOstvarenoPoena();
            } else {
                scoreComparatorTwo = (ucesca.get(i - 1)).getUkupnoOstvarenoPoena();
            }
            if (scoreComparatorOne.equals(scoreComparatorTwo)) {
                if (plasman == 0) {
                    plasman += 1;
                } else {
                    plasman = plasman;
                }
            } else {
                plasman = i + 1;
            }

            (ucesca.get(i)).setPlasman(plasman);
        }

        Takmicenje t = Kontroler.getInstance().getTakmicenje();

        if (ucesca.size() < 1) {
            JOptionPane.showMessageDialog(this,
                    "Sistem ne može da zapamti učešće na takmičenju",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        t.setUcesca(ucesca);
        boolean sacuvano = Kontroler.getInstance().zapamtiRezultateNaTakmicenju(t);

        if (sacuvano) {

            JOptionPane.showMessageDialog(this, "Sistem je zapamtio učešće na takmičenju");

            this.dispose();

            FrmUcesce frm = new FrmUcesce(null, true);
            frm.setLocationRelativeTo(null);
            frm.pack();
            frm.postaviTabeluUcescaNaTakmicenju(t);
            frm.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(this,
                    "Sistem ne može da zapamti učešće na takmičenju",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
    }//GEN-LAST:event_btnZapamtiActionPerformed

    private void btnObrisiRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiRActionPerformed
        int odabraniRed = tblUcesce.getSelectedRow();
        if (odabraniRed == -1) {
            JOptionPane.showMessageDialog(this, "Niste odabrali red!",
                    "Poruka", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        TabelaModelUcesceRezultati tu = (TabelaModelUcesceRezultati) tblUcesce.getModel();
        tu.obrisi(odabraniRed);
    }//GEN-LAST:event_btnObrisiRActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnKreirajUcesce;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnObrisiR;
    private javax.swing.JButton btnPovratak;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnZapamti;
    private javax.swing.JComboBox cmbTipTakmicenja;
    private com.toedter.calendar.JDateChooser datumKraja;
    private com.toedter.calendar.JDateChooser datumPocetka;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelaNapomena;
    private javax.swing.JLabel lblKraj;
    private javax.swing.JLabel lblNazivTakmicenja;
    private javax.swing.JLabel lblPocetak;
    private javax.swing.JLabel lblTipTakmicenja;
    private javax.swing.JPanel panelKreiranjeTakmicenja;
    private javax.swing.JPanel panelUcesce;
    private javax.swing.JTable tblUcesce;
    private javax.swing.JTextField txtMestoOdrzavanja;
    private javax.swing.JTextField txtNazivTakmicenja;
    // End of variables declaration//GEN-END:variables

    private int getNextID() {
        List<Takmicenje> takmicenja = Kontroler.getInstance().ucitajTakmicenja();
        int max = Integer.MIN_VALUE;
        for (Takmicenje takmicenje : takmicenja) {
            int id = Integer.parseInt(takmicenje.getTakmicenjeID().split("-")[1]);
            if (id > max) {
                max = id;
            }
        }
        return max + 1;
    }

    public void vidiTakmicenje(Takmicenje t) {
        //SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

        TabelaUcesce tu = new TabelaUcesce();
        tblUcesce.setModel(tu);

        cmbTipTakmicenja.removeAllItems();
        cmbTipTakmicenja.addItem(t.getTipTakmicenja() == null ? null : t.getTipTakmicenja());
        txtNazivTakmicenja.setText(t.getNaziv());
        datumPocetka.setDate(t.getPocetak());
        datumKraja.setDate(t.getKraj());
        txtMestoOdrzavanja.setText(t.getMestoOdrzavanja());
    }

    public void unesiRezultateZaTakmicenje(Takmicenje t) {
        //SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

        TabelaModelUcesceRezultati tu = new TabelaModelUcesceRezultati(t.getUcesca());
        tblUcesce.setModel(tu);

        cmbTipTakmicenja.removeAllItems();
        cmbTipTakmicenja.addItem(t.getTipTakmicenja() == null ? null : t.getTipTakmicenja());
        txtNazivTakmicenja.setText(t.getNaziv());
        datumPocetka.setDate(t.getPocetak());
        datumKraja.setDate(t.getKraj());
        txtMestoOdrzavanja.setText(t.getMestoOdrzavanja());

        TabelaModelUcesceRezultati tbl = new TabelaModelUcesceRezultati(t.getUcesca());
        tblUcesce.setModel(tbl);

    }

    private void izlistajTipoveTakmicenja() {
        List<TipTakmicenja> tipoviTakmicenja
                = Kontroler.getInstance().ucitajTipoveTakmicenja();

        cmbTipTakmicenja.removeAllItems();

        for (TipTakmicenja tipTakmicenja : tipoviTakmicenja) {
            cmbTipTakmicenja.addItem(tipTakmicenja);
        }
    }

    private void adjustFormMode(FormMode mode) {
        switch (mode) {
            case KREIRAJ_TAKMICENJE:
                
                labelaNapomena.setVisible(false);
                btnPovratak.setVisible(false);
                btnDodaj.setVisible(true);
                btnObrisi.setVisible(true);
                btnObrisiR.setVisible(false);
                btnZapamti.setVisible(false);
                setTitle("Kreiranje takmičenja");
                break;

            case VIDI_TAKMICENJE:
                labelaNapomena.setVisible(false);
                cmbTipTakmicenja.setEnabled(false);
                txtNazivTakmicenja.setEditable(false);
                datumPocetka.setEnabled(false);
                datumKraja.setEnabled(false);
                txtMestoOdrzavanja.setEditable(false);

                for (Component cp : panelUcesce.getComponents()) {
                    cp.setEnabled(true);
                }

                btnObrisiR.setVisible(false);
                btnSacuvaj.setVisible(false);
                btnKreirajUcesce.setVisible(true);
                btnObrisi.setVisible(true);
                btnDodaj.setVisible(true);
                btnZapamti.setVisible(false);
                setTitle("Takmičenje");
                setTakmicenje();
                break;

            case UNESI_REZULTATE:
                cmbTipTakmicenja.setEnabled(false);
                txtNazivTakmicenja.setEditable(false);
                datumPocetka.setEnabled(false);
                datumKraja.setEnabled(false);
                txtMestoOdrzavanja.setEditable(false);

                for (Component cp : panelUcesce.getComponents()) {
                    cp.setEnabled(true);
                }
                btnObrisiR.setVisible(true);
                btnSacuvaj.setVisible(false);
                btnObrisi.setVisible(false);
                btnDodaj.setVisible(false);
                btnKreirajUcesce.setVisible(false);
                btnZapamti.setVisible(true);
                setTitle("Takmičenje");
                setTakmicenje();
                break;

            case DODAJ_UCESNIKE:

                cmbTipTakmicenja.setEnabled(false);
                txtNazivTakmicenja.setEditable(false);
                datumPocetka.setEnabled(false);
                datumKraja.setEnabled(false);
                txtMestoOdrzavanja.setEditable(false);
                btnSacuvaj.setVisible(false);
                btnKreirajUcesce.setVisible(true);
                btnObrisi.setVisible(true);
                btnDodaj.setVisible(true);
                setTitle("Učešća na takmičenju");

                break;

        }
    }

    private void setTakmicenje() {
        String naziv = (String) Session.getInstance().
                getUseCaseParams().get("naziv");

        try {
            Takmicenje takmicenje
                    = Kontroler.getInstance().pronadjiTakmicenje(naziv);
            vidiTakmicenje(takmicenje);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Greška!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void onemoguciIzmenuTabeleUcesce() {
        for (Component cp : panelUcesce.getComponents()) {
            cp.setEnabled(false);
        }
    }

    public void dodajKlizacaUTabeluUcesca(Klizac k) {
        TabelaUcesce tu = (TabelaUcesce) tblUcesce.getModel();
        boolean dodat = tu.dodaj(k);
        if (!dodat) {
            JOptionPane.showMessageDialog(this, "Klizač je već dodat u listu!");
        }
    }

}
